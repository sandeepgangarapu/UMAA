addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
sum(is.na(individual_info_clean$AGE))
hist(individual_info_clean$AGE)
individual_info_clean <- individual_info_clean%>% mutate(AGE = ifelse((AGE %in% NA), mean(AGE, na.rm = TRUE),AGE) )
sum(is.na(individual_info_clean$AGE))
hist(individual_info_clean$AGE)
# ZIPCODE imputation
individual_info_clean$ZIP_CODE <- as.character(individual_info_clean$ZIP_CODE)
income_zipcode <- read_csv('D:/Group Folder/Data/Cleaned data sets/income_zipcode.csv')
income_zipcode$zip_code = as.character(income_zipcode$zip_code)
# Join zipcode file
individual_info_clean = individual_info_clean %>% left_join(income_zipcode, by = c("ZIP_CODE" = "zip_code"))
# Add new column to detect in TC area
individual_info_clean = individual_info_clean %>% mutate(IN_TC_METRO_AREA = ifelse(TC_AREA == 1, "Y", "N"))
# Add new column for Household Income
individual_info_clean = individual_info_clean %>% mutate(HOUSEHOLD_INCOME = ifelse(!is.na(HOUSEHOLD_INCOME), HOUSEHOLD_INCOME,
ifelse(is.na(age_25), NA,
ifelse(AGE < 26, age_25,
ifelse(AGE < 45, age_25_44,
ifelse(AGE < 65, age_45_64, age_65))))))
# Remove columns that are not required
individual_info_clean <- individual_info_clean %>% select(-c(TC_AREA, County, age_25, age_25_44, age_45_64,age_65))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# As there are 13,943 non TC residents, we remove those records.
# 446,608 remain.
# -- did not execute
individual_info_clean_new <- individual_info_clean%>%filter(!((IN_TC_METRO_AREA %in% NA) & (ZIP_CODE%in%NA)))
ee <-table(individual_info_clean_new$MEMBERSHIP_STATUS_CODE, individual_info_clean_new$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# As there are 13,943 non TC residents, we remove those records.
# 446,608 remain.
# -- did not execute - 19,623 records have NA value for ZIPCODE and IN_TC_METRO_AREA
individual_info_clean <- individual_info_clean%>%filter(!((IN_TC_METRO_AREA %in% NA) & (ZIP_CODE%in%NA)))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Household income
individual_info_clean <- individual_info_clean %>% group_by(AGE)%>%mutate(HOUSEHOLD_INCOME = ifelse(is.na(HOUSEHOLD_INCOME), mean(HOUSEHOLD_INCOME, na.rm=TRUE),HOUSEHOLD_INCOME ) )
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# IN TC METRO AREA
# Replace NA with NO
individual_info_clean <- individual_info_clean %>% mutate(IN_TC_METRO_AREA = ifelse(IN_TC_METRO_AREA %in% NA, "N","Y") )
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Convert FIRST_EVER_START_DATE, EXP_DATE_LAST_MEMBERSHIP to date
individual_info_clean$FIRST_EVER_START_DATE <- mdy(individual_info_clean$FIRST_EVER_START_DATE)
individual_info_clean$EXP_DATE_LAST_MEMBERSHIP <- mdy(individual_info_clean$EXP_DATE_LAST_MEMBERSHIP)
# Keep only those records that are required
individual_info_clean <- individual_info_clean %>% select(-c(DEATH_YEAR, IS_TC_GRAD))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Gender
# Remove Gender = U
# We lose 130 records
individual_info_clean <- individual_info_clean %>% filter(GENDER != "U")
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
sum(is.na(individual_info_clean$ID_SPOUSE)
sum(is.na(individual_info_clean$ID_SPOUSE))
sum(is.na(individual_info_clean$ID_SPOUSE))
NROW(individual_info_clean)-sum(is.na(individual_info_clean$ID_SPOUSE))
individual_info_clean <- individual_info[,c("ID_DEMO",
"ID_SPOUSE",
"MARITAL_STATUS",
"GENDER",
"BIRTH_YEAR",
"DEATH_YEAR",
"AGE",
"ZIP_CODE",
"IN_TC_METRO_AREA",
"HOUSEHOLD_INCOME",
"IS_TC_GRAD",
"MOST_RECENT_COLLEGE",
"MOST_RECENT_GRAD_YEAR",
"ATHLETIC_INTEREST",
"TRAVEL_INTEREST",
"MEMBERSHIP_TYPE_CODE",
"MEMBERSHIP_STATUS_CODE",
"FIRST_EVER_START_DATE",
"EXP_DATE_LAST_MEMBERSHIP")]
# Replace '' with NA in the dataframe
individual_info_clean[individual_info_clean==''] <- NA
# Keep all those who are TC GRAD
# 39,615 records are eliminated.
# 577,757 remain.
individual_info_clean <-individual_info_clean %>% filter((IS_TC_GRAD %in% NA)|(IS_TC_GRAD=='Y'))
temp <- c(individual_info_clean$ID_SPOUSE)
temp <- individual_info_clean %>% select(ID_SPOUSE) %>%na.omit()
View(temp)
temp <- individual_info_clean %>% select(ID_SPOUSE) %>%na.omit()
NROW(temp)
temp <- individual_info_clean %>% select(ID_SPOUSE) %>%na.omit()%>%unique()
NROW(temp)
temp <- individual_info_clean %>% select(ID_SPOUSE) %>%filter(!is.na(ID_SPOUSE))
NROW(temp)
temp <- individual_info_clean %>% select(ID_SPOUSE)
NROW(temp)
temp <- temp%>%mutate(ID_SPOUSE = ifelse(is.na(ID_SPOUSE), "NA", ID_SPOUSE) )
temp <- temp %>% filter(temp!="NA")
NROW(temp)
NROW(individual_info_clean)-sum(is.na(individual_info_clean$ID_SPOUSE))
individual_info_clean <- individual_info[,c("ID_DEMO",
"ID_SPOUSE",
"MARITAL_STATUS",
"GENDER",
"BIRTH_YEAR",
"DEATH_YEAR",
"AGE",
"ZIP_CODE",
"IN_TC_METRO_AREA",
"HOUSEHOLD_INCOME",
"IS_TC_GRAD",
"MOST_RECENT_COLLEGE",
"MOST_RECENT_GRAD_YEAR",
"ATHLETIC_INTEREST",
"TRAVEL_INTEREST",
"MEMBERSHIP_TYPE_CODE",
"MEMBERSHIP_STATUS_CODE",
"FIRST_EVER_START_DATE",
"EXP_DATE_LAST_MEMBERSHIP")]
# Replace '' with NA in the dataframe
individual_info_clean[individual_info_clean==''] <- NA
# Keep all those who are TC GRAD
# 39,615 records are eliminated.
# 577,757 remain.
individual_info_clean <-individual_info_clean %>% filter((IS_TC_GRAD %in% NA)|(IS_TC_GRAD=='Y'))
NROW(individual_info_clean)-sum(is.na(individual_info_clean$ID_SPOUSE))
temp <- individual_info_clean %>% select(ID_SPOUSE)
temp <- temp%>%mutate(ID_SPOUSE = ifelse(is.na(ID_SPOUSE), "NA", ID_SPOUSE) )
temp <- temp %>% filter(temp!="NA")
individual_info_clean_new <- individual_info_clean
individual_info_clean_new <- individual_info_clean_new %>% filter(ID_SPOUSE %in% c(temp$ID_SPOUSE))
View(temp)
temp <- individual_info_clean %>% select(ID_SPOUSE) %>% na.omit()
# temp <- temp%>%mutate(ID_SPOUSE = ifelse(is.na(ID_SPOUSE), "NA", ID_SPOUSE) )
# temp <- temp %>% filter(temp!="NA")
View(temp)
individual_info_clean_new <- individual_info_clean
individual_info_clean_new <- individual_info_clean_new %>% filter(ID_SPOUSE %in% c(temp$ID_SPOUSE))
individual_info_clean_new <- individual_info_clean
individual_info_clean_new <- individual_info_clean_new %>% filter(!(ID_SPOUSE %in% c(temp$ID_SPOUSE)))
individual_info_clean_new <- individual_info_clean_new %>% filter(!(ID_SPOUSE %in% c(temp$ID_SPOUSE)))
temp <- c(individual_info_clean %>% select(ID_SPOUSE) %>% na.omit())
# temp <- temp%>%mutate(ID_SPOUSE = ifelse(is.na(ID_SPOUSE), "NA", ID_SPOUSE) )
# temp <- temp %>% filter(temp!="NA")
individual_info_clean_new <- individual_info_clean_new %>% filter(!(ID_SPOUSE %in% c(temp)))
individual_info_clean_new <- individual_info_clean_new %>% filter(!(ID_SPOUSE %in% (temp)))
individual_info_clean_new <- individual_info_clean
individual_info_clean_new <- individual_info_clean_new %>% filter(!(ID_SPOUSE %in% (temp)))
individual_info_clean_new <- individual_info_clean_new[individual_info_clean_new$ID_SPOUSE!=temp,]
individual_info_clean_new <- individual_info_clean
individual_info_clean_new <- individual_info_clean_new%>% filter(!(ID_DEMO %in% temp))
individual_info_clean_new <- individual_info_clean_new%>% filter((ID_DEMO %in% temp))
individual_info_clean_new <- individual_info_clean
individual_info_clean_new <- individual_info_clean
individual_info_clean_new <- individual_info_clean_new%>% filter(!(ID_DEMO %in% temp))
View(temp)
individual_info_clean_new <- individual_info_clean_new%>% filter(!(ID_DEMO %in% temp$ID_SPOUSE))
NROW(individual_info_clean) - NROW(individual_info_clean_new)
a <- c(individual_info_clean%>%select(ID_DEMO))
a <- individual_info_clean[,"ID_DEMO"]
temp <- individual_info_clean[,"ID_SPOUSE"]
length(a)
length(temp)
temp <- unique(individual_info_clean[,"ID_SPOUSE"])
length(a)
length(temp)
intersect(a,temp)
res <- intersect(a,temp)
length(res)
temp <- c(individual_info_clean %>% select(ID_SPOUSE) %>% na.omit())
# temp <- temp%>%mutate(ID_SPOUSE = ifelse(is.na(ID_SPOUSE), "NA", ID_SPOUSE) )
# temp <- temp %>% filter(temp!="NA")
individual_info_clean_new <- individual_info_clean
individual_info_clean_new <- individual_info_clean_new%>% filter(!(ID_DEMO %in% temp$ID_SPOUSE))
NROW(individual_info_clean) - NROW(individual_info_clean_new)
individual_info_clean <- individual_info_clean%>% filter(!(ID_DEMO %in% temp$ID_SPOUSE))
# Death year treatment
# Keep all records that is NA or 9999
#
# 57,961 are eliminated.
# 519,796 records remain.
individual_info_clean_new <-individual_info_clean %>% filter((DEATH_YEAR==9999)|(is.na(DEATH_YEAR)))
individual_info_clean$DEATH_YEAR
a <- unique(individual_info_clean$DEATH_YEAR)
a <- data.frame(unique(individual_info_clean$DEATH_YEAR))
View(a)
# a <- data.frame(unique(individual_info_clean$DEATH_YEAR))
table(individual_info_clean$DEATH_YEAR)
hist(individual_info_clean$DEATH_YEAR)
# Death year treatment
# Keep all records that is NA or 9999
# 57,961 are eliminated.
# 519,796 records remain.
# individual_info_clean <-individual_info_clean %>% filter((DEATH_YEAR==9999)|(is.na(DEATH_YEAR)))
individual_info_clean_new <-individual_info_clean %>% filter((is.na(DEATH_YEAR)))
# Death year treatment
# Keep all records that is NA or 9999
# 57,961 are eliminated.
# 519,796 records remain.
individual_info_clean_new <-individual_info_clean %>% filter((DEATH_YEAR==9999)|(is.na(DEATH_YEAR)))
a <- individual_info[,"ID_DEMO"]
NROW(intersect(a,temp))
a <- individual_info[,"ID_DEMO"]
temp <- unique(individual_info[,"ID_SPOUSE"])
NROW(intersect(a,temp))
# a <- data.frame(unique(individual_info_clean$DEATH_YEAR))
table(individual_info$IS_TC_GRAD)
individual_info_clean <- individual_info[,c("ID_DEMO",
"ID_SPOUSE",
"MARITAL_STATUS",
"GENDER",
"BIRTH_YEAR",
"DEATH_YEAR",
"AGE",
"ZIP_CODE",
"IN_TC_METRO_AREA",
"HOUSEHOLD_INCOME",
"IS_TC_GRAD",
"MOST_RECENT_COLLEGE",
"MOST_RECENT_GRAD_YEAR",
"ATHLETIC_INTEREST",
"TRAVEL_INTEREST",
"MEMBERSHIP_TYPE_CODE",
"MEMBERSHIP_STATUS_CODE",
"FIRST_EVER_START_DATE",
"EXP_DATE_LAST_MEMBERSHIP")]
# Replace '' with NA in the dataframe
individual_info_clean[individual_info_clean==''] <- NA
# Keep all those who are TC GRAD
# 39,615 records are eliminated.
# 577,757 remain.
individual_info_clean <-individual_info_clean %>% filter((IS_TC_GRAD %in% NA)|(IS_TC_GRAD=='Y'))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
knitr::opts_chunk$set(echo = TRUE)
individual_info = read.csv('D:/Group Folder/Data/individual_info.csv')
individual_info_clean <- individual_info[,c("ID_DEMO",
"ID_SPOUSE",
"MARITAL_STATUS",
"GENDER",
"BIRTH_YEAR",
"DEATH_YEAR",
"AGE",
"ZIP_CODE",
"IN_TC_METRO_AREA",
"HOUSEHOLD_INCOME",
"IS_TC_GRAD",
"MOST_RECENT_COLLEGE",
"MOST_RECENT_GRAD_YEAR",
"ATHLETIC_INTEREST",
"TRAVEL_INTEREST",
"MEMBERSHIP_TYPE_CODE",
"MEMBERSHIP_STATUS_CODE",
"FIRST_EVER_START_DATE",
"EXP_DATE_LAST_MEMBERSHIP")]
# Replace '' with NA in the dataframe
individual_info_clean[individual_info_clean==''] <- NA
# Keep all those who are TC GRAD
# 39,615 records are eliminated.
# 577,757 remain.
individual_info_clean <-individual_info_clean %>% filter((IS_TC_GRAD %in% NA)|(IS_TC_GRAD=='Y'))
library(reticulate)
library(dplyr)
library(naniar)
library(ggplot2)
library(lubridate)
library(data.table)
library(tidyverse)
library(dtplyr)
library(stringr)
require(scales)
# Keep all those who are TC GRAD
# 39,615 records are eliminated.
# 577,757 remain.
individual_info_clean <-individual_info_clean %>% filter((IS_TC_GRAD %in% NA)|(IS_TC_GRAD=='Y'))
# Death year treatment
# Keep all records that is NA or 9999
#
# 57,961 are eliminated.
# 519,796 records remain.
individual_info_clean <-individual_info_clean %>% filter((DEATH_YEAR==9999)|(is.na(DEATH_YEAR)))
# Inspect DEATH_YEAR = 9999
# These are the ones who's BIRTH_YEAR has to be determined.
#
# 25,545 (~5%) of the records have a value of 9999.
#
# We impute values for BIRTH_YEAR based on MOST_RECENT_GRAD_YEAR if the values are NA.
#
# 202 records are removed as they have no birth_year or most_recent_grad_year information. 25,343 kept.
#
# We lose 1% of the records.
individual_info_clean <- individual_info_clean%>%
mutate(BIRTH_YEAR = ifelse(
((DEATH_YEAR==9999)&is.na(BIRTH_YEAR)&(MOST_RECENT_GRAD_YEAR==9999)),NA,
ifelse((is.na(BIRTH_YEAR)&(DEATH_YEAR==9999)),
MOST_RECENT_GRAD_YEAR-23,
BIRTH_YEAR)) )
# REMOVE THE 202 VALUES -not done because there are very few records.
# Calculate age using BIRTH_YEAR
individual_info_clean <- individual_info_clean %>%
mutate(AGE = year(Sys.Date()) - BIRTH_YEAR)
# Age
# Keep age between 0 to 100. We lose  14913 records. We have 460,861 records.
## - kept age that is NA as well
individual_info_clean <- individual_info_clean %>% filter((AGE %in% NA) | ((AGE >= 0) & (AGE  <= 100)))
# Consider all the remaining members as living
individual_info_clean$DEATH_YEAR <- na_if(individual_info_clean$DEATH_YEAR,9999)
# ZIPCODE imputation
individual_info_clean$ZIP_CODE <- as.character(individual_info_clean$ZIP_CODE)
income_zipcode <- read_csv('D:/Group Folder/Data/Cleaned data sets/income_zipcode.csv')
income_zipcode$zip_code = as.character(income_zipcode$zip_code)
# Join zipcode file
individual_info_clean = individual_info_clean %>% left_join(income_zipcode, by = c("ZIP_CODE" = "zip_code"))
# Add new column to detect in TC area
individual_info_clean = individual_info_clean %>% mutate(IN_TC_METRO_AREA = ifelse(TC_AREA == 1, "Y", "N"))
# Add new column for Household Income
individual_info_clean = individual_info_clean %>% mutate(HOUSEHOLD_INCOME = ifelse(!is.na(HOUSEHOLD_INCOME), HOUSEHOLD_INCOME,
ifelse(is.na(age_25), NA,
ifelse(AGE < 26, age_25,
ifelse(AGE < 45, age_25_44,
ifelse(AGE < 65, age_45_64, age_65))))))
# Remove columns that are not required
individual_info_clean <- individual_info_clean %>% select(-c(TC_AREA, County, age_25, age_25_44, age_45_64,age_65))
# As there are 13,943 non TC residents, we remove those records.
# 446,608 remain.
# -- did not execute - 19,623 records have NA value for ZIPCODE and IN_TC_METRO_AREA
individual_info_clean <- individual_info_clean%>%filter(!((IN_TC_METRO_AREA %in% NA) & (ZIP_CODE%in%NA)))
# Household income
individual_info_clean <- individual_info_clean %>% group_by(AGE)%>%mutate(HOUSEHOLD_INCOME = ifelse(is.na(HOUSEHOLD_INCOME), mean(HOUSEHOLD_INCOME, na.rm=TRUE),HOUSEHOLD_INCOME ) )
# IN TC METRO AREA
# Replace NA with NO
individual_info_clean <- individual_info_clean %>% mutate(IN_TC_METRO_AREA = ifelse(IN_TC_METRO_AREA %in% NA, "N","Y") )
# Convert FIRST_EVER_START_DATE, EXP_DATE_LAST_MEMBERSHIP to date
individual_info_clean$FIRST_EVER_START_DATE <- mdy(individual_info_clean$FIRST_EVER_START_DATE)
individual_info_clean$EXP_DATE_LAST_MEMBERSHIP <- mdy(individual_info_clean$EXP_DATE_LAST_MEMBERSHIP)
# Keep only those records that are required
individual_info_clean <- individual_info_clean %>% select(-c(DEATH_YEAR, IS_TC_GRAD))
# Gender
# Remove Gender = U
# We lose 130 records
# 484,950 records remain
individual_info_clean <- individual_info_clean %>% filter(GENDER != "U")
knitr::opts_chunk$set(echo = TRUE)
individual_info = read.csv('D:/Group Folder/Data/individual_info.csv')
knitr::opts_chunk$set(echo = TRUE)
individual_info = read.csv('D:/Group Folder/Data/individual_info.csv')
knitr::opts_chunk$set(echo = TRUE)
individual_info = read.csv('D:/Group Folder/Data/individual_info.csv')
individual_info_clean <- individual_info[,c("ID_DEMO",
"ID_SPOUSE",
"MARITAL_STATUS",
"GENDER",
"BIRTH_YEAR",
"DEATH_YEAR",
"AGE",
"ZIP_CODE",
"IN_TC_METRO_AREA",
"HOUSEHOLD_INCOME",
"IS_TC_GRAD",
"MOST_RECENT_COLLEGE",
"MOST_RECENT_GRAD_YEAR",
"ATHLETIC_INTEREST",
"TRAVEL_INTEREST",
"MEMBERSHIP_TYPE_CODE",
"MEMBERSHIP_STATUS_CODE",
"FIRST_EVER_START_DATE",
"EXP_DATE_LAST_MEMBERSHIP")]
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE, exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Replace '' with NA in the dataframe
individual_info_clean[individual_info_clean==''] <- NA
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Keep all those who are TC GRAD
# 39,615 records are eliminated.
# 577,757 remain.
individual_info_clean <-individual_info_clean %>% filter((IS_TC_GRAD %in% NA)|(IS_TC_GRAD=='Y'))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(naniar)
library(ggplot2)
library(lubridate)
library(stringr)
library(tidyverse)
require(scales)
library(cluster)
library(fastDummies)
library(corrplot)
# Keep all those who are TC GRAD
# 39,615 records are eliminated.
# 577,757 remain.
individual_info_clean <-individual_info_clean %>% filter((IS_TC_GRAD %in% NA)|(IS_TC_GRAD=='Y'))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Death year treatment
# Keep all records that is NA or 9999
#
# 57,961 are eliminated.
# 519,796 records remain.
individual_info_clean <-individual_info_clean %>% filter((DEATH_YEAR==9999)|(is.na(DEATH_YEAR)))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Inspect DEATH_YEAR = 9999
# These are the ones who's BIRTH_YEAR has to be determined.
#
# 25,545 (~5%) of the records have a value of 9999.
#
# We impute values for BIRTH_YEAR based on MOST_RECENT_GRAD_YEAR if the values are NA.
#
# 202 records are removed as they have no birth_year or most_recent_grad_year information. 25,343 kept.
#
# We lose 1% of the records.
individual_info_clean <- individual_info_clean%>%
mutate(BIRTH_YEAR = ifelse(
((DEATH_YEAR==9999)&is.na(BIRTH_YEAR)&(MOST_RECENT_GRAD_YEAR==9999)),NA,
ifelse((is.na(BIRTH_YEAR)&(DEATH_YEAR==9999)),
MOST_RECENT_GRAD_YEAR-23,
BIRTH_YEAR)) )
# REMOVE THE 202 VALUES -not done because there are very few records.
# Calculate age using BIRTH_YEAR
individual_info_clean <- individual_info_clean %>%
mutate(AGE = year(Sys.Date()) - BIRTH_YEAR)
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Age
# Keep age between 0 to 100. We lose  14913 records. We have 460,861 records.
## - kept age that is NA as well
## 504,573 records remain
individual_info_clean <- individual_info_clean %>% filter((AGE %in% NA) | ((AGE >= 0) & (AGE  <= 100)))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Consider all the remaining members as living
individual_info_clean$DEATH_YEAR <- na_if(individual_info_clean$DEATH_YEAR,9999)
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
sum(is.na(individual_info_clean$AGE))
hist(individual_info_clean$AGE)
individual_info_clean <- individual_info_clean%>% mutate(AGE = ifelse((AGE %in% NA), mean(AGE, na.rm = TRUE),AGE) )
sum(is.na(individual_info_clean$AGE))
hist(individual_info_clean$AGE)
# ZIPCODE imputation
individual_info_clean$ZIP_CODE <- as.character(individual_info_clean$ZIP_CODE)
income_zipcode <- read_csv('D:/Group Folder/Data/Cleaned data sets/income_zipcode.csv')
income_zipcode$zip_code = as.character(income_zipcode$zip_code)
# Join zipcode file
individual_info_clean = individual_info_clean %>% left_join(income_zipcode, by = c("ZIP_CODE" = "zip_code"))
# Add new column to detect in TC area
individual_info_clean = individual_info_clean %>% mutate(IN_TC_METRO_AREA = ifelse(TC_AREA == 1, "Y", "N"))
# Add new column for Household Income
individual_info_clean = individual_info_clean %>% mutate(HOUSEHOLD_INCOME = ifelse(!is.na(HOUSEHOLD_INCOME), HOUSEHOLD_INCOME,
ifelse(is.na(age_25), NA,
ifelse(AGE < 26, age_25,
ifelse(AGE < 45, age_25_44,
ifelse(AGE < 65, age_45_64, age_65))))))
# Remove columns that are not required
individual_info_clean <- individual_info_clean %>% select(-c(TC_AREA, County, age_25, age_25_44, age_45_64,age_65))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# As there are 13,943 non TC residents, we remove those records.
# 484,950 remain.
# -- did not execute - 19,623 records have NA value for ZIPCODE and IN_TC_METRO_AREA
individual_info_clean <- individual_info_clean%>%filter(!((IN_TC_METRO_AREA %in% NA) & (ZIP_CODE%in%NA)))
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Household income
individual_info_clean <- individual_info_clean %>% group_by(AGE)%>%mutate(HOUSEHOLD_INCOME = ifelse(is.na(HOUSEHOLD_INCOME), mean(HOUSEHOLD_INCOME, na.rm=TRUE),HOUSEHOLD_INCOME ) )
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# IN TC METRO AREA
# Replace NA with NO
individual_info_clean <- individual_info_clean %>% mutate(IN_TC_METRO_AREA = ifelse(IN_TC_METRO_AREA %in% NA, "N","Y") )
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
# Convert FIRST_EVER_START_DATE, EXP_DATE_LAST_MEMBERSHIP to date
individual_info_clean$FIRST_EVER_START_DATE <- mdy(individual_info_clean$FIRST_EVER_START_DATE)
individual_info_clean$EXP_DATE_LAST_MEMBERSHIP <- mdy(individual_info_clean$EXP_DATE_LAST_MEMBERSHIP)
# Keep only those records that are required
individual_info_clean <- individual_info_clean %>% select(-c(DEATH_YEAR, IS_TC_GRAD))
# Gender
# Remove Gender = U
# We lose 130 records
# 484,950 records remain
individual_info_clean <- individual_info_clean %>% filter(GENDER != "U")
ee <-table(individual_info_clean$MEMBERSHIP_STATUS_CODE, individual_info_clean$MEMBERSHIP_TYPE_CODE,exclude = NULL)
addmargins(ee, FUN = list(Total = sum), quiet = TRUE)
write.csv(individual_info_clean, "D:/Group Folder/Data/Cleaned data sets/individual_info_cleaned.csv", row.names = FALSE)
## set working directory
setwd('D:/Group Folder/SEQUENTIAL FILES/Code')
## Libraries used
library(reticulate)
## Academic csv transformation
py_run_file('Read academic.py')
## Libraries used
library(reticulate)
## set working directory
setwd('D:/Group Folder/SEQUENTIAL FILES/Code')
## Libraries used
library(reticulate)
## Academic csv transformation
py_run_file('Read academic.py')
## Membership csv transformation
py_run_file('Read membership.py')
## Individual_info csv transformation
py_run_file('Read individual_info.py')
## Events csv transformation
py_run_file('Read events.py')
